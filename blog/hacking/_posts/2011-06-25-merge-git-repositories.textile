---
title: Merge GIT repositories
layout: blog-post
tags:
- git
- version-control
---

When it comes to version control I am more and more convinced by Git and it's superb branching model.
Lately I was confronted with the need to merge two GIT repositories and of course the commit logs should have been preserved!

So this is the setup:

* Main repository: @/repo@
* Feature repository: @/repo/feature@

There are a few tools out there that can handle this (@git-stitch@ for example), but I wanted to keep the main repository as-is, so this wasn't an option. At least I do not know how to use/configure the tools in that manner.

h2. Step by Step Guide

*Step 1* - Create a bundle of the feature repository. I assume that you have all changes committed to the master branch.

<pre>
<code>
cd feature
git bundle create feature.bundle master
</code>
</pre>


*Step 2* - Import the code into a new branch of the main repository and check it out.

<pre>
<code>
cd ..
git fetch feature/feature.bundle master:master-feature
git checkout master-feature
</code>
</pre>


*Step 3* - Move the files into a subdirectory called @feature@. Ensure to also move hidden ones like the @.gitignore@ (run @ls -la@ in order to check)

<pre>
<code>
mkdir feature
git mv -k * feature
git mv .gitignore feature/
ls -la
git commit -a -m"moving feature stuff in subfolder"
</code>
</pre>


*Step 4* - Merge the feature into the master brnach of the main repository.

<pre>
<code>
git checkout master
git merge master-feature
git branch -d master-feature
</code>
</pre>


By following these steps you should be able to import any subrepositories back into the main repository.

Let me know if you have any questions or problems!

